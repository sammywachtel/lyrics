name: PR Preview Environment

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  PROJECT_ID: lyrics-467218
  GAR_LOCATION: us-central1
  REPOSITORY: songwriting-app-preview
  REGION: us-central1
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint and fix issues
        working-directory: ./frontend
        run: |
          # Run ESLint with --fix to automatically fix issues
          npm run lint -- --fix || true
          
          # Check if there are any remaining linting errors
          if ! npm run lint; then
            echo "❌ ESLint found issues that couldn't be auto-fixed"
            echo "Please review and fix the remaining linting errors:"
            npm run lint
            exit 1
          else
            echo "✅ All linting issues resolved"
          fi

      - name: Commit lint fixes
        run: |
          # Configure git for the action
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          if ! git diff --quiet; then
            echo "📝 Auto-fixing lint issues and committing changes"
            git add -A
            git commit -m "Auto-fix lint issues
            
            Automatically applied ESLint fixes during PR workflow."
            git push
          else
            echo "✅ No lint fixes needed"
          fi

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test
        env:
          CI: true

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker authentication
        run: |
          gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev --quiet

      - name: Create preview repository if needed
        run: |
          gcloud artifacts repositories describe $REPOSITORY \
            --location=$GAR_LOCATION || \
          gcloud artifacts repositories create $REPOSITORY \
            --repository-format=docker \
            --location=$GAR_LOCATION \
            --description="Preview environments for PRs"

      - name: Set preview service names
        id: names
        run: |
          PR_NUMBER=${{ github.event.number }}
          echo "SERVICE_BACKEND=songwriting-backend-pr-${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "SERVICE_FRONTEND=songwriting-frontend-pr-${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=pr-${PR_NUMBER}-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Build and push preview images
        run: |
          # Build backend
          docker build -f Dockerfile.backend \
            -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ steps.names.outputs.SERVICE_BACKEND }}:${{ steps.names.outputs.IMAGE_TAG }} \
            .
          
          # Build frontend
          docker build -f Dockerfile.frontend \
            -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ steps.names.outputs.SERVICE_FRONTEND }}:${{ steps.names.outputs.IMAGE_TAG }} \
            .
          
          # Push images
          docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ steps.names.outputs.SERVICE_BACKEND }}:${{ steps.names.outputs.IMAGE_TAG }}
          docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ steps.names.outputs.SERVICE_FRONTEND }}:${{ steps.names.outputs.IMAGE_TAG }}

      - name: Deploy preview backend
        id: deploy-backend
        run: |
          gcloud run deploy ${{ steps.names.outputs.SERVICE_BACKEND }} \
            --image $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ steps.names.outputs.SERVICE_BACKEND }}:${{ steps.names.outputs.IMAGE_TAG }} \
            --region $REGION \
            --allow-unauthenticated \
            --set-env-vars "SUPABASE_URL=${{ secrets.SUPABASE_URL }},SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 2 \
            --port 8001 \
            --execution-environment gen2 \
            --labels "app=songwriting,tier=backend,env=preview,pr=${{ github.event.number }}" \
            --quiet
          
          echo "BACKEND_URL=$(gcloud run services describe ${{ steps.names.outputs.SERVICE_BACKEND }} --region=$REGION --format='value(status.url)')" >> $GITHUB_OUTPUT

      - name: Deploy preview frontend
        id: deploy-frontend
        run: |
          gcloud run deploy ${{ steps.names.outputs.SERVICE_FRONTEND }} \
            --image $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/${{ steps.names.outputs.SERVICE_FRONTEND }}:${{ steps.names.outputs.IMAGE_TAG }} \
            --region $REGION \
            --allow-unauthenticated \
            --set-env-vars "VITE_API_URL=${{ steps.deploy-backend.outputs.BACKEND_URL }}" \
            --memory 256Mi \
            --cpu 0.5 \
            --min-instances 0 \
            --max-instances 2 \
            --port 80 \
            --execution-environment gen2 \
            --labels "app=songwriting,tier=frontend,env=preview,pr=${{ github.event.number }}" \
            --quiet
          
          echo "FRONTEND_URL=$(gcloud run services describe ${{ steps.names.outputs.SERVICE_FRONTEND }} --region=$REGION --format='value(status.url)')" >> $GITHUB_OUTPUT

      - name: Comment preview URLs on PR
        uses: actions/github-script@v7
        with:
          script: |
            const frontendUrl = '${{ steps.deploy-frontend.outputs.FRONTEND_URL }}';
            const backendUrl = '${{ steps.deploy-backend.outputs.BACKEND_URL }}';
            
            const comment = `## 🚀 Preview Environment Deployed
            
            Your changes have been deployed to a preview environment:
            
            - **Frontend**: ${frontendUrl}
            - **Backend**: ${backendUrl}
            - **Health Check**: ${backendUrl}/health
            
            The preview environment will be automatically cleaned up when the PR is closed.
            
            > Preview deployed from commit ${context.sha.substring(0, 8)}`;
            
            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🚀 Preview Environment Deployed')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  cleanup:
    name: Cleanup Preview Environment
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Delete preview services
        run: |
          PR_NUMBER=${{ github.event.number }}
          SERVICE_BACKEND="songwriting-backend-pr-${PR_NUMBER}"
          SERVICE_FRONTEND="songwriting-frontend-pr-${PR_NUMBER}"
          
          # Delete services (ignore errors if they don't exist)
          gcloud run services delete $SERVICE_BACKEND --region=$REGION --quiet || true
          gcloud run services delete $SERVICE_FRONTEND --region=$REGION --quiet || true
          
          echo "Preview environment for PR #${PR_NUMBER} has been cleaned up"