name: Code Quality Pipeline

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  frontend-quality:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci

      - name: Run ESLint Check
        run: npm run lint

      - name: Run TypeScript Check
        run: npx tsc --noEmit

      - name: Run Unit Tests
        run: npm test -- --coverage --watchAll=false

      - name: Run E2E Tests
        run: npm run test:e2e
        if: contains(github.event_name, 'pull_request')

      - name: Upload Test Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  backend-quality:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Black Check
        run: black --check .

      - name: Run isort Check
        run: isort --check-only .

      - name: Run Flake8 Linting
        run: flake8

      # MyPy temporarily disabled for Phase 0 - graduated quality gate system
      # Will be re-enabled in Phase 1 for new files only
      # See QUALITY_GATES.md for the full implementation plan
      # - name: Run MyPy Type Checking
      #   run: mypy .

      - name: Run Backend Tests
        run: pytest --cov=app --cov-report=xml

      - name: Upload Backend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Security Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  quality-gate:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, security-scan]
    if: always()

    steps:
      - name: Check Quality Gate Status
        run: |
          echo "Frontend Quality: ${{ needs.frontend-quality.result }}"
          echo "Backend Quality: ${{ needs.backend-quality.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

          if [[ "${{ needs.frontend-quality.result }}" != "success" ]] || \
             [[ "${{ needs.backend-quality.result }}" != "success" ]] || \
             [[ "${{ needs.security-scan.result }}" != "success" && "${{ needs.security-scan.result }}" != "skipped" ]]; then
            echo "‚ùå Quality gate failed! Please check the failed jobs above."
            echo ""
            echo "üí° To fix issues locally:"
            echo "1. Run 'npm run setup:dev' to install pre-commit hooks"
            echo "2. Run 'npm run quality-check' to run all quality checks"
            echo "3. Run 'npm run lint:fix' to auto-fix linting issues"
            echo "4. Commit changes and push again"
            exit 1
          else
            echo "‚úÖ All quality checks passed!"
          fi
