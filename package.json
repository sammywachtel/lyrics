{
  "name": "songwriting-app",
  "version": "1.0.0",
  "description": "AI-assisted songwriting web application",
  "main": "index.js",
  "scripts": {
    "dev": "concurrently \"npm run frontend:dev\" \"npm run backend:dev\"",
    "frontend:stop": "pkill -f vite",
    "backend:stop": "pkill -f uvicorn",
    "stop": "npm run frontend:stop && npm run backend:stop",
    "frontend:dev": "cd frontend && npm run dev",
    "backend:dev": "cd backend && uvicorn app.main:app --reload --host 0.0.0.0 --port 8001 --log-level debug",
    "build": "npm run frontend:build",
    "frontend:build": "cd frontend && npm run build",
    "backend:install": "cd backend && pip install -r requirements.txt",
    "start": "cd backend && uvicorn app.main:app --host 0.0.0.0 --port 8001",
    "test": "cd frontend && npm test",
    "test:watch": "cd frontend && npm run test:watch",
    "test:coverage": "cd frontend && npm run test:coverage",
    "frontend:test": "cd frontend && npm test",
    "lint": "cd frontend && npm run lint",
    "lint:fix": "cd frontend && npm run lint:fix",
    "docker:dev": "docker-compose -f docker-compose.dev.yml up",
    "dev:pw": "playwright codegen --save-storage=storage.json http://localhost:3000",
    "docker:dev:build": "docker-compose -f docker-compose.dev.yml build",
    "docker:dev:up": "docker-compose -f docker-compose.dev.yml up",
    "docker:dev:down": "docker-compose -f docker-compose.dev.yml down",
    "docker:dev:logs": "docker-compose -f docker-compose.dev.yml logs -f",
    "docker:dev:clean": "docker-compose -f docker-compose.dev.yml down -v --rmi local",
    "gcp:setup": "gcloud config set project ${GOOGLE_CLOUD_PROJECT} && gcloud auth configure-docker us-central1-docker.pkg.dev",
    "gcp:build:frontend": "gcloud builds submit --config=cloudbuild.frontend.yaml .",
    "gcp:build:backend": "gcloud builds submit --config=cloudbuild.backend.yaml .",
    "gcp:build": "npm run gcp:build:frontend && npm run gcp:build:backend",
    "gcp:deploy:frontend": "gcloud run deploy lyrics-frontend --source . --region us-central1 --allow-unauthenticated --port 8080 --cpu 1 --memory 512Mi --min-instances 0 --max-instances 10",
    "gcp:deploy:backend": "gcloud run deploy lyrics-backend --source . --region us-central1 --allow-unauthenticated --port 8001 --cpu 1 --memory 1Gi --min-instances 0 --max-instances 10",
    "gcp:deploy": "npm run gcp:deploy:backend && npm run gcp:deploy:frontend",
    "gcp:logs:frontend": "gcloud logging read \"resource.type=cloud_run_revision AND resource.labels.service_name=lyrics-frontend\" --limit 50 --format json",
    "gcp:logs:backend": "gcloud logging read \"resource.type=cloud_run_revision AND resource.labels.service_name=lyrics-backend\" --limit 50 --format json",
    "gcp:status": "gcloud run services list --region us-central1",
    "deploy": "npm run gcp:deploy",
    "precommit:install": "pre-commit install",
    "precommit:run": "pre-commit run --all-files",
    "setup:hooks": "npm run precommit:install && echo 'Pre-commit hooks installed successfully!'",
    "quality:gate": "bash scripts/quality-gate.sh",
    "quality:frontend": "bash scripts/quality-gate.sh frontend",
    "quality:backend": "bash scripts/quality-gate.sh backend",
    "quality:precommit": "bash scripts/quality-gate.sh pre-commit",
    "setup:dev": "bash setup-dev.sh",
    "validate": "bash scripts/validate.sh",
    "validate:phase0": "bash scripts/validate.sh --phase=0",
    "quality:baseline": "bash scripts/validate.sh --baseline",
    "quality:status": "bash scripts/quality-status.sh"
  },
  "keywords": [
    "songwriting",
    "ai",
    "lyrics",
    "music"
  ],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "dependencies": {
    "lint": "^1.1.2"
  }
}
